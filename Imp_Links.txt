Kernel startup
	* http://henryomd.blogspot.in/2014/11/linux-kernel-startup.html

Adding A New System Service To Android
    * http://www.linaro.org/blog/adding-a-new-system-service-to-android-5-tips-and-how-to/
    * http://www.opersys.com/blog/extending-android-hal

Rasberrypi
    * http://sysprogs.com/VisualKernel/tutorials/raspberry/buildkernel/
    * https://www.raspberrypi.org/documentation/installation/installing-images/linux.md
    * https://www.raspberrypi.org/downloads/ (Default images)
    * https://github.com/raspberrypi/firmware/wiki/Mailboxes (Mail box)
    * http://elinux.org/RPi_Framebuffer
    * https://yangqiao.wordpress.com/2015/07/05/rtems-board-support-packages-raspberry-pi-mailbox-and-framebuffer-implementation/
    * http://magicsmoke.co.za/?p=284
    * Screen Rotation
			#display_rotate=0 Normal
			display_rotate=1 90 degrees
			#display_rotate=2 180 degrees
			#NOTE: You can rotate both the image and touch interface 180ยบ by entering lcd_rotate=2 instead
			#display_rotate=3 270 degrees
			#display_rotate=0x10000 horizontal flip
			#display_rotate=0x20000 vertical flip
	* Read about Phandle
	* http://mirrors.neusoft.edu.cn/rpi-kernel/drivers/input/touchscreen/rpi-ft5406.c (Default driver for touch screen)
	* Read touch calibration
    
OS
    * https://www.safaribooksonline.com/library/view/understanding-the-linux/0596005652/ch04.html

Ext2 partition layout
    * https://www.safaribooksonline.com/library/view/understanding-the-linux/0596005652/ch18s02.html
    sudo blockdev --getbsz /dev/sda1 (Check Block size)

Beagle bone black (BBB) Link
    * https://eewiki.net/display/linuxonarm/BeagleBone+Black#BeagleBoneBlack-ARMCrossCompiler:GCC
    * http://www.slimlogic.co.uk/2011/05/omap3-sd-booting/ (Flashing image script)
    * http://elinux.org/BeagleBoardBeginners
    * https://blackfin.uclinux.org/doku.php?id=bootloaders:u-boot:testing

Ram
    * http://www.hardwaresecrets.com/understanding-ram-timings/
    * http://www.hardwaresecrets.com/everything-you-need-to-know-about-ddr-ddr2-and-ddr3-memories/4/
    * http://www.jariellecatbagan.com/the-theory-behind-external-ddr3-initialization-on-the-beaglebone-black/
    * https://www.physicsforums.com/threads/distance-between-memory-and-processor.733734/

IO Systems:
    * https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/13_IOSystems.html

Block Driver:
	High memory access-
		* https://www.kernel.org/doc/Documentation/vm/highmem.txt
	* http://yannik520.github.io/blkdevarch.html
	* https://www.cs.rutgers.edu/~pxk/416/notes/11-devices.html
	* http://www.makelinux.net/ldd3/chp-16-sect-2

Ram Disk :
    * https://www.kernel.org/doc/Documentation/blockdev/ramdisk.txt
    * http://www.tcu-inc.com/Articles/21/Ramdisk2.html
    * https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt
    * http://yattutime.blogspot.in/2014/02/linux-boot-process.html
    Table: Comparison of ramfs and tmpfs Experimentation    Tmpfs   Ramfs
    |       Experimentation                      |      Tmpfs           |       Ramfs           |
    | Fill maximum space and continue writing    |  Will display error  | Will continue writing |
    |       Fixed Size                           |      Yes             |           No          |
    |       Uses Swap                            |      Yes             |           No          |
    |       Volatile Storage                     |      Yes             |           Yes         |

Block Driver:
	* http://blog.superpat.com/2010/05/04/a-simple-block-driver-for-linux-kernel-2-6-31/
	* http://www.makelinux.net/ldd3/chp-16-sect-3

Ram Disk:
         The problem is that the maximum size of a ramdisk, more specifically of size of memory that can be accessed via the ramdisk driver is configured at compiletime, can be overwritten at boottime, but remains fixed once the kernel is loaded into memory. The default value is probably measured in Megabytes. If I recall correctly the memory for a ramdisk is reserved right when the driver is loaded, all ramdisks are the same size and there is are some 16 ramdisks by default. So not even you want a ramdisk size of 16G :-)

         As stated in the other answer, tmpfs is what you want to use. Further, you won't win a lot by having your entire OS in a ramdisk/tmpfs. Just copy your builddir to a tmpfs and do your compiling then. You may have to ensure that all temporary results are written to a location thats in the tmpfs as well.

     * http://lxr.free-electrons.com/source/drivers/block/rd.c?v=2.4.37
     * https://blulin.wordpress.com/2008/11/28/tips-to-create-ramdisk-in-a-linux-system/
     * http://www.linuxjournal.com/article/2890?page=0,0

Jtag Setup
    * http://sysprogs.com/VisualKernel/tutorials/raspberry/jtagsetup/

Ram Disk
    * man initrd
    * https://kernel.org/doc/Documentation/blockdev/ramdisk.txt
    * http://opensourceforu.efytimes.com/2012/02/device-drivers-disk-on-ram-block-drivers/
    * http://www.vanemery.com/Linux/Ramdisk/ramdisk.html
    * https://www.ibm.com/developerworks/library/l-initrd/
    * http://www.linuxfocus.org/English/November1999/article124.html
    * http://www.jamescoyle.net/knowledge/951-the-difference-between-a-tmpfs-and-ramfs-ram-disk
    * http://www.tldp.org/HOWTO/archived/Loopback-Root-FS/Loopback-Root-FS-2.html
    * https://www.kernel.org/doc/Documentation/filesystems/ramfs-rootfs-initramfs.txt

container_of Macro
    syntax: container_of( pointer, container_type, container_field );
    This macro takes a pointer to a filed name container_field, within a structure of type container_type, and returns a pointer to the containing structure .
    simply this is a convenience macro that may be used to obtain a pointer to a structure from a pointer to some other structure contained with in it.

Exception handling in Pipelining
    * http://homepage.cs.uiowa.edu/~ghosh/2-16-06.pdf

Status Register (CPSR and SPSR)
    * http://www.heyrick.co.uk/armwiki/The_Status_register

Cortex Reference manual
    * http://infocenter.arm.com/help/topic/com.arm.doc.ddi0439b/DDI0439B_cortex_m4_r0p0_trm.pdf

Arm Arch A8
    * https://www.arm.com/files/pdf/ARM_Arch_A8.pdf

Risc and Cisc Arch difference
    * http://www.engineersgarage.com/articles/risc-and-cisc-architecture?page=3
    * http://www.engineersgarage.com/articles/risc-and-cisc-architecture?page=5 (Example of Risc  and Cisc arch)

Linux Kernel & Device Driver Programming
    * http://www.cs.uni.edu/~diesburg/courses/dd/calendar.html

Device model (Chapter 14 ldd)
    * http://www.landley.net/kdocs/ols/2002/ols2002-pages-368-375.pdf
    /include/linux/device.h file to check

Driver Model (Chapter 14 ldd)
    * http://mirror.linux.org.au/linux.conf.au/2003/papers/Patrick_Mochel/Patrick_Mochel.pdf

Copy_from_user
    * http://sofc.developer-works.com/article/26555983/Internal+Working+of+Copy_from_user
    * http://www.ibm.com/developerworks/library/l-kernel-memory-access/

ioctl
    * http://opensourceforu.efytimes.com/2011/08/io-control-in-linux/ (Imp)
    * http://www.cs.fsu.edu/~baker/devices/notes/ch6.html
    * http://www.makelinux.net/ldd3/chp-6-sect-1

Errors: Linux System Errors
    * http://www-numi.fnal.gov/offline_software/srt_public_context/WebDocs/Errors/unix_system_errors.html

Access Control on a Device File
    * http://www.makelinux.net/ldd3/chp-6-sect-6

Copy form and to user
	* https://www.quora.com/Linux-Kernel/How-does-copy_to_user-work
    * https://www.quora.com/Why-we-need-copy_from_user-as-the-kernel-can-access-all-the-memory-If-we-see-the-copy_from_user-implementation-again-we-are-copying-data-to-the-kernel-memory-using-memcpy-Doesnt-it-an-extra-overhead

        It is not true, copy_to_user, copy_from_user can in fact refer to adresses which can trigger page fault in kernel mode. If the page fault could not be resolved because it is invalid, it is because the access is regulated via the copy_to_user and copy_from_user, the kernel is able to propagate EFAULT to the user.
        So copy_to_user and copy_from_user provide protection, first it provides protection ensuring the address is a valid user space address and handling the page fault in case of invalid pointer sending EFAULT to user rather than crashing the kernel.

    * https://www.quora.com/What-does-insmod-internally-do
